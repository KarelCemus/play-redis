# ===================
# Redis cache configuration
# ===================
play.cache.redis {
  # redis server: host
  host:       localhost
  # redis server: port
  port:       6379
  # redis server: database number
  database:   1
  # list of nodes in a cluster
  cluster:    [
    # nodes are defined as a sequence of objects:
    #  required string, defining a host the node is running on
    #  host:        localhost
    #  required integer, defining a port the node is running on
    #  port:        6379
    #  optional integer, defines a database to connect to
    #  database:    null
    # optional string, defines a password to use
    #  password:    null
  ]
  # connection timeout in milliseconds
  timeout:    1s
  # akka dispatcher
  dispatcher: akka.actor.default-dispatcher
  # synchronization timeout in play.api.cache.redis.CacheApi
  wait:       1s
  # configuration source: the connection settings are possibly extracted
  # from various sources. By default, the library expects values 'static'
  # for this configuration file, 'env' for extraction of the connection
  # string from the environment variable REDIS_URL and 'custom' when the
  # application supplies its own configuration extractor. By default it
  # expects local configuration.
  configuration: static
  # when authentication is required, define the password. The argument is optional
  password:    null
  # when environment configuration is used it reads the environment variable
  # and expects there a connection string. This key specifies the variable name.
  connection-string-variable: REDIS_URL
  # The intention of cache is usually to optimize the application behavior,
  # not to provide any business logic, i.e., it makes sense the cache could
  # be removed without any visible change except for possible performance loss.
  #
  # In consequence, we think that failed cache requests should not break the
  # application flow by emitting the exception, it should be logged and ignored.
  # However, not always this is desired behavior. To resolve this ambiguity,
  # we provide `RecoveryPolicy` trait implementing the behavior to be executed
  # when the cache request  fails. By default, we provide two implementations:
  #
  # 'log-and-fail':       Logs the error at firts and then emits RedisException
  #
  # 'log-and-default':    Logs the error at first and then returns operation
  #                       neutral value, which should look like there is no
  #                       cache in use.
  #
  # 'custom':             User provides his own binding to implementation of `RecoveryPolicy`
  #
  #
  # Besides logging and re-populating the exceptions, it is also possible to
  # send email or re-run the failed command, which could like like certain robustness.
  #
  recovery: log-and-default
}

# ==================
# Akka configuration
# ==================
akka {
  log-dead-letters = off
  akka.log-dead-letters-during-shutdown = off

  actor {
    serialization-bindings {
      "java.io.Serializable" = java
      "scala.collection.immutable.List" = java
    }
  }
}
