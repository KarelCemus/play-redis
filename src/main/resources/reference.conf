# ===================
# Redis cache configuration
# ===================
play.cache.redis {

  # default redis connection settings, for more options see below

  # redis server: host
  host:       localhost
  # redis server: port
  port:       6379
  # redis server: database number
  database:   0

  # there are two ways to configure redis instances.
  #
  # for most users the first option is sufficient, it covers
  # over 90% of cases. It uses single either standalone or
  # cluster default cache. In this case, you can configure
  # the cache directly under the 'play.cache.redis' key.
  # The cache name is defined in 'play.cache.redis.default-cache'.
  #
  # for example:
  #
  # play.cache.redis {
  #   # redis server: host
  #   host:       localhost
  #   # redis server: port
  #   port:       6379
  #   # redis server: database number
  #   database:   0
  # }
  #
  # for more advanced settings such as a cluster or connection
  # string see below.
  #
  #
  #
  # for advanced users, there is the second way to configure
  # the instances through the list of named instances.
  #
  # you can defined 'instances' node, which is
  # a map of name-configuration tuples. The name determines
  # the name of the cache, configuration defines the settings.
  # You can combine it with 'bind-default' and 'default-cache' keys.
  #
  # the configuration loader switches into this advanced mode
  # automatically when the 'instances' key is defined. In that case,
  # cache defined directly under 'play.cache.redis' is ignored.
  #
  # for details about named caches see https://www.playframework.com/documentation/2.6.x/ScalaCache#Accessing-different-caches
  #
  # for example:
  #
  #
  # instances {
  #
  #  # definition of the default cache, its name is
  #  # defined in 'play.cache.redis.default-cache'
  #  play {
  #
  #   ##########################
  #   # Standalone mode
  #   ##########################
  #
  #   # redis server: host
  #   host:       localhost
  #   # redis server: port
  #   port:       6379
  #   # redis server: database number
  #   database:   0
  #   # when authentication is required, optinally can be provided a username, otherwise "redis" is used.
  #   username:   null
  #   # when authentication is required, define the password. The argument is optional
  #   password:   null
  #
  #   ##########################
  #   # Cluster mode
  #   ##########################
  #
  #   # list of nodes in a cluster either [] or null. Intentional use:
  #   cluster:  [
  #     # nodes are defined as a sequence of objects:
  #     {
  #       # required string, defining a host the node is running on
  #       host:        localhost
  #       # required integer, defining a port the node is running on
  #       port:        6379
  #       # optional string, defines a username to use with "redis" as a fallback
  #       username:   null
  #       # optional string, defines a password to use
  #       password:    null
  #     }
  #   ]
  #
  #   # to enable the cluster, set 'source' variable to 'cluster'
  #   source:           cluster
  #
  #   # note: when cluster is set, the 'host', 'port',
  #   # and 'database' properties do not apply.
  #
  #   ##########################
  #   # Sentinel mode
  #   ##########################
  #
  #   # list of sentinel nodes is either [] or null. Intentional use:
  #   sentinels:  [
  #     # nodes are defined as a sequence of objects:
  #     {
  #       # required string, defining a host the node is running on
  #       host:        localhost
  #       # required integer, defining a port the node is running on
  #       port:        6379
  #     }
  #   ]
  #
  #   # master name that you specify when using the
  #   #  `sentinel get-master-addr-by-name NAME` command
  #   master-group: r0
  #   # number of your redis database (optional)
  #   database: 1
  #   # password to your redis hosts (optional)
  #   password: something
  #   # to enable the sentinel, set 'source' variable to 'sentinel'
  #   source:           sentinel
  #
  #   # note: when sentinel is set, the 'host', 'port'
  #   # properties do not apply.
  #
  #   ##########################
  #   # Connection string mode
  #   ##########################
  #
  #   # When the application is running in PaaS, it is
  #   # often required to configure the redis from the connection
  #   # string in the environmental variable. Play's configuration
  #   # resolves environmental variables through ${VARIABLE}, e.g.,
  #   # to run this library on Heroku, set 'connection-string'
  #   # variable to either '${REDIS_URL}' or '${REDISCLOUD_URL}'
  #   # depending on your PaaS configuration.
  #   #
  #   # The connection string can be also written statically thought
  #   # it is intended for the use with environmental variables.
  #   connection-string:    'redis://rediscloud:password@hostname:port'
  #   connection-string:    ${REDIS_URL}
  #
  #   # note: To consider a 'connection-string' variable, set 'source'
  #   # to 'connection-string'.
  #   source:           connection-string
  #
  #   ##########################
  #   # Master-Slaves mode
  #   ##########################
  #
  #   # master node, required config
  #   master: {
  #       # required string, defining a host the master is running on
  #       host:        localhost
  #       # required integer, defining a port the master is running on
  #       port:        6379
  #       # number of your redis database on master (optional)
  #       database: 1
  #       # optional string, defines a username to use with "redis" as a fallback
  #       username:   null
  #       # password on master host (optional)
  #       password: something
  #   }
  #
  #   # list of slaves nodes is either [].
  #   slaves: [
  #      {
  #          # required string, defining a host the slave is running on
  #          host:        localhost
  #          # required integer, defining a port the slave is running on
  #          port:        6379
  #          # number of your redis database on slave (optional)
  #          database: 1
  #          # optional string, defines a username to use with "redis" as a fallback
  #          username:   null
  #          # password on slave host (optional)
  #          password: something
  #      }
  #   ]
  #
  #   # number of your redis database, use if not specified for a node (optional)
  #   database: 1
  #   # optional string, defines a username to use with "redis" as a fallback
  #   username:   null
  #   # password to your redis hosts, use if not specified for a node (optional)
  #   password: something
  #   # to enable the master-slaves, set 'source' variable to 'master-slaves'
  #   source:           master-slaves
  # }

  # configuration source. This library supports multiple types of
  # redis configuration provideres as well as it supports both
  # standalone instances and clusters. To simplify the configuration
  # and make it more explicit, 'source' property determines the intended
  # type of the instance. By default, each instance is considered
  # statically configured standalone redis server. However, supported values
  # are:
  #  - 'standalone' mode indicates a use of 'host', 'port', 'password'
  #      and 'database' variables
  #  - 'cluster' mode indicates use of 'cluster' variable defining nodes
  #  - 'sentinel' mode indicates use of 'sentinels' variable defining nodes
  #  - 'connection-string' mode is usually used with PaaS as setup by the
  #      environment. It consideres 'connection-string' property.
  #  - 'master-slaves' master-slave mode is used to write only to the master node
  #      and read from one of slaves node. It consideres 'master-slaves' property.
  #  - 'custom' indicates that the user supplies his own RedisInstance configuration
  #
  # Default value is 'standalone'
  #
  # note: this is global definition, can be locally overriden for each
  # cache instance. To do so, redefine this property
  # under 'play.cache.redis.instances.instance-name.this-property'.
  #
  source:           standalone

  # synchronization timeout applies only with synchronous API. It does not
  # apply with asynchronous API and you are free to ignore it. This value
  # is used with `Await.result`.
  #
  # note: this is global definition, can be locally overriden for each
  # cache instance. To do so, redefine this property
  # under 'play.cache.redis.instances.instance-name.this-property'.
  #
  sync-timeout:     1s

  # connection timeout applies only when the connection to redis is not established.
  # When defined, it determines the maximal timeout before the future is
  # either resolved or rejected.
  #
  # note: this is global definition, can be locally overriden for each
  # cache instance. To do so, redefine this property
  # under 'play.cache.redis.instances.instance-name.this-property'.
  #
  connection-timeout:     500ms

  # the redis usually returns the reponse very quickly but sometimes the
  # requests stuck, the answer takes long time or the redis is
  # disconnected. In all these cases the response may take
  # very long time (minutes) or possibly won't return at all.
  #
  # this timeout indicates the maximum waiting time for
  # the request. If the reponse is not returned within this timeout,
  # the exception is thrown and then the recovery policy applies.
  #
  # note: by default, for the performance reasons, the timeout is disabled.
  # if you expect possible delayed responses from the redis or encounter
  # these issues, enable this timeout setting it, e.g., to 1 minute.
  #
  # note: this is global definition, can be locally overriden for each
  # cache instance. To do so, redefine this property
  # under 'play.cache.redis.instances.instance-name.this-property'.
  #
  redis-timeout:    null

  # each instance can apply its own prefix to all keys it works with.
  # This enables, e.g., use of multiple instances with the same redis
  # database under the hood. There are two intended use cases:
  #
  #   1. two named instances with the same database
  #   2. to avoid conflicts when there is also another application accessing the cache
  #
  # With named caches, this value may and should be locally overriden under
  # 'play.cache.redis.instances.instance-name.this-property'.
  #
  prefix:           null

  # pekko dispatcher
  #
  # note: this is global definition, can be locally overriden for each
  # cache instance. To do so, redefine this property
  # under 'play.cache.redis.instances.instance-name.this-property'.
  #
  dispatcher:       pekko.actor.default-dispatcher

  # invocation policy applies in methods `getOrElse`. It determines
  # whether to wait until the `set` completes or return eagerly the
  # computed value. Valid values:
  #  - 'lazy':  for lazy invocation waiting for the `set` completion
  #  - 'eager': for eager invocation returning the computed on miss
  #             without waiting for the `set` completion. Eager
  #             invocation ignores the error in `set`, if occurs.
  #
  # Default value is 'lazy' to properly handle errors, if occurs.
  #
  # note: this is global definition, can be locally overriden for each
  # cache instance. To do so, redefine this property
  # under 'play.cache.redis.instances.instance-name.this-property'.
  #
  invocation:       lazy

  # The intention of cache is usually to optimize the application behavior,
  # not to provide any business logic, i.e., it makes sense the cache could
  # be removed without any visible change except for possible performance loss.
  #
  # In consequence, we think that failed cache requests should not break the
  # application flow by emitting the exception, it should be logged and ignored.
  # However, not always this is desired behavior. To resolve this ambiguity,
  # we provide `RecoveryPolicy` trait implementing the behavior to be executed
  # when the cache request  fails. By default, we provide two implementations:
  #
  # 'log-and-fail':       Logs the error at firts and then emits RedisException
  #
  # 'log-and-default':    Logs the error at first and then returns operation
  #                       neutral value, which should look like there is no
  #                       cache in use.
  #
  # 'custom':             User provides his own binding to implementation of `RecoveryPolicy`
  #
  #
  # Besides logging and re-populating the exceptions, it is also possible to
  # send email or re-run the failed command, which could like like certain robustness.
  #
  # note: this is global definition, can be locally overriden for each
  # cache instance. To do so, redefine this property
  # under 'play.cache.redis.instances.instance-name.this-property'.
  #
  recovery:         log-and-default

  # Automatically bind default unnamed APIs to default
  # named cache. This applies only with Guice.
  #
  bind-default:     true

  # Name of the default instance, this works
  # together with 'bind-default'.
  #
  default-cache:    play

  # SSL settings for Redis connections. These settings allow you to configure
  # SSL/TLS for secure Redis connections. The configuration is split into two parts:
  # 'ssl-settings' for detailed SSL configuration and 'ssl' for basic enabling/verification.
  #
  # The 'ssl-settings' section provides advanced SSL configuration options:
  #
  # 'protocols':           [Required] List of SSL/TLS protocols to be used (e.g., ["TLSv1.2", "TLSv1.3"])
  #
  # 'trust-store':         [Required] Configuration for the trust store, which contains certificates
  #                        that the client trusts. Can be configured with either a file or URL
  #                        resource, and an optional password.
  #
  # 'key-store-type':      [Optional] The type of the key store (e.g., "JKS", "PKCS12")
  #
  # 'cipher-suites':       [Optional] List of cipher suites to be used for SSL connections
  #
  # 'hand-shake-timeout':  [Optional] Maximum time to wait for SSL handshake completion
  #
  # 'key-store':           [Optional] Configuration for the key store, which contains the client's
  #                        private keys and certificates. Can be configured with either
  #                        a file or URL resource, and an optional password.
  #                        Options:
  #                        - 'file': File resource configuration
  #                          - 'path': Path to the keystore file
  #                        - 'url': URL resource configuration
  #                          - 'path': URL to the keystore resource
  #                        - 'password': [Optional] Password for the keystore
  #
  # 'key-manager':         [Optional] Configuration for the key manager, which manages the client's
  #                        private keys. Can be configured with either a factory or resource.
  #                        Options:
  #                        - 'factory': Factory configuration
  #                          - 'algorithm': Algorithm to use (e.g., "SunX509")
  #                          - 'provider': [Optional] Provider to use (e.g., "SunJSSE")
  #                        - 'resource': Resource configuration
  #                          - 'key-cert-chain': Certificate chain file
  #                            - 'file': File configuration
  #                              - 'path': Path to the certificate chain file
  #                          - 'key': Key file
  #                            - 'file': File configuration
  #                              - 'path': Path to the key file
  #                        - 'password': Password for the key manager
  #
  # 'trust-store':         [Required] Configuration for the trust store, which contains certificates
  #                        that the client trusts. Can be configured with either a file or URL
  #                        resource, and an optional password.
  #                        Options:
  #                        - 'file': File resource configuration
  #                          - 'path': Path to the truststore file
  #                        - 'url': URL resource configuration
  #                          - 'path': URL to the truststore resource
  #                        - 'password': [Optional] Password for the truststore
  #
  # 'trust-manager':       [Optional] Configuration for the trust manager, which manages the server
  #                        certificates. Can be configured with either a factory or file.
  #                        Options:
  #                        - 'factory': Factory configuration
  #                          - 'algorithm': Algorithm to use (e.g., "PKIX")
  #                          - 'provider': [Optional] Provider to use (e.g., "SunJSSE")
  #                        - 'file': File resource configuration
  #                          - 'path': Path to the trust manager file
  #
  # Example configurations:
  #
  # 1. Basic configuration with file-based trust store and key store:
  # ssl-settings {
  #   protocols: ["TLSv1.2", "TLSv1.3"]
  #   trust-store {
  #     file {
  #       path: "/path/to/truststore.jks"
  #     }
  #     password: "truststore-password"
  #   }
  #   key-store-type: "JKS"
  #   cipher-suites: ["TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"]
  #   hand-shake-timeout: "10s"
  #   key-store {
  #     file {
  #       path: "/path/to/keystore.jks"
  #     }
  #     password: "keystore-password"
  #   }
  # }
  #
  # 2. Configuration with URL-based trust store and key store:
  # ssl-settings {
  #   protocols: ["TLSv1.2", "TLSv1.3"]
  #   trust-store {
  #     url {
  #       path: "https://example.com/truststore.jks"
  #     }
  #     password: "truststore-password"
  #   }
  #   key-store {
  #     url {
  #       path: "https://example.com/keystore.jks"
  #     }
  #     password: "keystore-password"
  #   }
  # }
  #
  # 3. Configuration with factory-based key manager and trust manager:
  # ssl-settings {
  #   protocols: ["TLSv1.2", "TLSv1.3"]
  #   trust-store {
  #     file {
  #       path: "/path/to/truststore.jks"
  #     }
  #     password: "truststore-password"
  #   }
  #   key-manager {
  #     factory {
  #       algorithm: "SunX509"
  #       provider: "SunJSSE"
  #     }
  #     password: "key-password"
  #   }
  #   trust-manager {
  #     factory {
  #       algorithm: "PKIX"
  #       provider: "SunJSSE"
  #     }
  #   }
  # }
  #
  # 4. Configuration with resource-based key manager and file-based trust manager:
  # ssl-settings {
  #   protocols: ["TLSv1.2", "TLSv1.3"]
  #   trust-store {
  #     file {
  #       path: "/path/to/truststore.jks"
  #     }
  #     password: "truststore-password"
  #   }
  #   key-manager {
  #     resource {
  #       key-cert-chain {
  #         file {
  #           path: "/path/to/cert-chain.pem"
  #         }
  #       }
  #       key {
  #         file {
  #           path: "/path/to/private-key.pem"
  #         }
  #       }
  #     }
  #     password: "key-password"
  #   }
  #   trust-manager {
  #     file {
  #       path: "/path/to/ca-certificates.pem"
  #     }
  #   }
  # }
  #
  # The 'ssl' section provides basic SSL configuration:
  #
  # 'enabled':          [Optional, default: false] Boolean flag to enable/disable SSL for Redis connections.
  #                     When set to true, the connection will use SSL/TLS.
  #
  # 'verify-peer-mode': [Optional, default: 'none'] Verification mode for the server's certificate.
  #                     Available options:
  #                     - 'none': No verification (default)
  #                     - 'ca': Verify that the certificate is issued by a trusted CA
  #                     - 'full': Verify the certificate and hostname
  #
  # Example configuration:
  # ssl {
  #   enabled: true
  #   verify-peer-mode: full
  # }
  #
  # note: these are global definitions, can be locally overridden for each
  # cache instance. To do so, redefine these properties
  # under 'play.cache.redis.instances.instance-name.these-properties'.
  #
}

# ==================
# Pekko configuration
# ==================
pekko {

  actor {
    serialization-bindings {
      "java.io.Serializable" = java
      "scala.collection.immutable.List" = java
    }
  }
}
